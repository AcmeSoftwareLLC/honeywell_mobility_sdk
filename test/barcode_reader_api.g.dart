// Copyright 2023 Acme Software LLC. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// ignore_for_file: unnecessary_cast
// Autogenerated from Pigeon (v9.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, unnecessary_import
// ignore_for_file: avoid_relative_lib_imports
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;
import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
import 'package:flutter_test/flutter_test.dart';

import 'package:honeywell_mobility_sdk/src/barcode_reader_api.dart';

class _TestBarcodeReaderApiCodec extends StandardMessageCodec {
  const _TestBarcodeReaderApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is BarcodeFailureEvent) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is BarcodeReadEvent) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is TriggerStateChangeEvent) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return BarcodeFailureEvent.decode(readValue(buffer)!);
      case 129:
        return BarcodeReadEvent.decode(readValue(buffer)!);
      case 130:
        return TriggerStateChangeEvent.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class TestBarcodeReaderApi {
  static const MessageCodec<Object?> codec = _TestBarcodeReaderApiCodec();

  /// {@template honeywell.reader.aim}
  /// Sets the aiming state of the scanner.
  /// {@endtemplate}
  void aim(bool on);

  /// {@template honeywell.reader.claim}
  /// Claims the scanner.
  ///
  /// Client activities should call this method in onResume() to ensure that
  /// the scanner is claimed before making any calls to control the scanner.
  ///
  /// Calls to control the scanner such as [decode]
  /// will throw [PlatformException] if claim() has not been called.
  ///
  /// Once claimed, the scanner will begin to post events to registered event listeners.
  /// {@endtemplate}
  void claim();

  /// {@template honeywell.reader.close}
  /// Closes the scanner and terminates the established session.
  ///
  /// Once close() has been called, any future calls on this object will throw.
  /// Client activities should call this method in onClose()
  /// to terminate the scanner session prior to exiting.
  /// {@endtemplate}
  void close();

  /// {@template honeywell.reader.create}
  /// Creates a new BarcodeReader object.
  /// {@endtemplate}
  bool create();

  /// {@template honeywell.reader.decode}
  /// Sets the decoding state of the scanner.
  /// {@endtemplate}
  void decode(bool on);

  /// {@template honeywell.reader.light}
  /// Sets the aiming state of the scanner.
  /// {@endtemplate}
  void light(bool on);

  /// {@template honeywell.reader.notify}
  /// Use the BarcodeReader's built-in mechanism for notifying the user of events.
  /// {@endtemplate}
  void notify(String notification);

  /// {@template honeywell.reader.release}
  /// Releases the scanner claim.
  ///
  /// Client activities should call this method in onPause()
  /// to stop receiving scan notifications while the activity is inactive.
  /// {@endtemplate}
  void release();

  /// {@template honeywell.reader.setProperty}
  /// Sets a property with [key] and [value].
  /// {@endtemplate}
  void setProperty(String key, Object value);

  /// {@template honeywell.reader.setProperties}
  /// Sets a map of properties.
  /// {@endtemplate}
  void setProperties(Map<String?, Object?> properties);

  /// {@template honeywell.reader.softwareTrigger}
  /// Sends a trigger up/down action
  ///
  /// [state] - whether to trigger the scanner on or off
  /// {@endtemplate}
  void softwareTrigger(bool state);

  static void setup(TestBarcodeReaderApi? api,
      {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.BarcodeReaderApi.aim', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.BarcodeReaderApi.aim was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_on = (args[0] as bool?);
          assert(arg_on != null,
              'Argument for dev.flutter.pigeon.BarcodeReaderApi.aim was null, expected non-null bool.');
          api.aim(arg_on!);
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.BarcodeReaderApi.claim', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          // ignore message
          api.claim();
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.BarcodeReaderApi.close', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          // ignore message
          api.close();
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.BarcodeReaderApi.create', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          // ignore message
          final bool output = api.create();
          return <Object?>[output];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.BarcodeReaderApi.decode', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.BarcodeReaderApi.decode was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_on = (args[0] as bool?);
          assert(arg_on != null,
              'Argument for dev.flutter.pigeon.BarcodeReaderApi.decode was null, expected non-null bool.');
          api.decode(arg_on!);
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.BarcodeReaderApi.light', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.BarcodeReaderApi.light was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_on = (args[0] as bool?);
          assert(arg_on != null,
              'Argument for dev.flutter.pigeon.BarcodeReaderApi.light was null, expected non-null bool.');
          api.light(arg_on!);
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.BarcodeReaderApi.notify', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.BarcodeReaderApi.notify was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_notification = (args[0] as String?);
          assert(arg_notification != null,
              'Argument for dev.flutter.pigeon.BarcodeReaderApi.notify was null, expected non-null String.');
          api.notify(arg_notification!);
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.BarcodeReaderApi.release', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          // ignore message
          api.release();
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.BarcodeReaderApi.setProperty', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.BarcodeReaderApi.setProperty was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_key = (args[0] as String?);
          assert(arg_key != null,
              'Argument for dev.flutter.pigeon.BarcodeReaderApi.setProperty was null, expected non-null String.');
          final Object? arg_value = (args[1] as Object?);
          assert(arg_value != null,
              'Argument for dev.flutter.pigeon.BarcodeReaderApi.setProperty was null, expected non-null Object.');
          api.setProperty(arg_key!, arg_value!);
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.BarcodeReaderApi.setProperties', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.BarcodeReaderApi.setProperties was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Map<String?, Object?>? arg_properties =
              (args[0] as Map<Object?, Object?>?)?.cast<String?, Object?>();
          assert(arg_properties != null,
              'Argument for dev.flutter.pigeon.BarcodeReaderApi.setProperties was null, expected non-null Map<String?, Object?>.');
          api.setProperties(arg_properties!);
          return <Object?>[];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.BarcodeReaderApi.softwareTrigger', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.BarcodeReaderApi.softwareTrigger was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_state = (args[0] as bool?);
          assert(arg_state != null,
              'Argument for dev.flutter.pigeon.BarcodeReaderApi.softwareTrigger was null, expected non-null bool.');
          api.softwareTrigger(arg_state!);
          return <Object?>[];
        });
      }
    }
  }
}
