// Copyright 2023 Acme Software LLC. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v9.1.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.acmesoftware.honeywell_mobility_sdk

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class BarcodeReadEvent (
  val barcodeData: String,
  val charset: String,
  val codeId: String,
  val aimId: String,
  val timestamp: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): BarcodeReadEvent {
      val barcodeData = list[0] as String
      val charset = list[1] as String
      val codeId = list[2] as String
      val aimId = list[3] as String
      val timestamp = list[4] as String
      return BarcodeReadEvent(barcodeData, charset, codeId, aimId, timestamp)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      barcodeData,
      charset,
      codeId,
      aimId,
      timestamp,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class BarcodeFailureEvent (
  val timestamp: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): BarcodeFailureEvent {
      val timestamp = list[0] as String
      return BarcodeFailureEvent(timestamp)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      timestamp,
    )
  }
}
@Suppress("UNCHECKED_CAST")
private object BarcodeReaderApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          BarcodeFailureEvent.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          BarcodeReadEvent.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is BarcodeFailureEvent -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is BarcodeReadEvent -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface BarcodeReaderApi {
  /**
   * {@template honeywell.reader.aim}
   * Sets the aiming state of the scanner.
   * {@endtemplate}
   */
  fun aim(on: Boolean)
  /**
   * {@template honeywell.reader.claim}
   * Claims the scanner.
   *
   * Client activities should call this method in onResume() to ensure that
   * the scanner is claimed before making any calls to control the scanner.
   *
   * Calls to control the scanner such as [decode]
   * will throw [PlatformException] if claim() has not been called.
   *
   * Once claimed, the scanner will begin to post events to registered event listeners.
   * {@endtemplate}
   */
  fun claim()
  /**
   * {@template honeywell.reader.close}
   * Closes the scanner and terminates the established session.
   *
   * Once close() has been called, any future calls on this object will throw.
   * Client activities should call this method in onClose()
   * to terminate the scanner session prior to exiting.
   * {@endtemplate}
   */
  fun close()
  /**
   * {@template honeywell.reader.create}
   * Creates a new BarcodeReader object.
   * {@endtemplate}
   */
  fun create(): Boolean
  /**
   * {@template honeywell.reader.decode}
   * Sets the decoding state of the scanner.
   * {@endtemplate}
   */
  fun decode(on: Boolean)
  /**
   * {@template honeywell.reader.light}
   * Sets the aiming state of the scanner.
   * {@endtemplate}
   */
  fun light(on: Boolean)
  /**
   * {@template honeywell.reader.notify}
   * Use the BarcodeReader's built-in mechanism for notifying the user of events.
   * {@endtemplate}
   */
  fun notify(notification: String)
  /**
   * {@template honeywell.reader.release}
   * Releases the scanner claim.
   *
   * Client activities should call this method in onPause()
   * to stop receiving scan notifications while the activity is inactive.
   * {@endtemplate}
   */
  fun release()
  /**
   * {@template honeywell.reader.setProperties}
   * Sets a map of properties.
   * {@endtemplate}
   */
  fun setProperties(properties: Map<String, Any>)
  /**
   * {@template honeywell.reader.softwareTrigger}
   * Sends a trigger up/down action
   *
   * [state] - whether to trigger the scanner on or off
   * {@endtemplate}
   */
  fun softwareTrigger(state: Boolean)

  companion object {
    /** The codec used by BarcodeReaderApi. */
    val codec: MessageCodec<Any?> by lazy {
      BarcodeReaderApiCodec
    }
    /** Sets up an instance of `BarcodeReaderApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: BarcodeReaderApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BarcodeReaderApi.aim", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val onArg = args[0] as Boolean
            var wrapped: List<Any?>
            try {
              api.aim(onArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BarcodeReaderApi.claim", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.claim()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BarcodeReaderApi.close", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.close()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BarcodeReaderApi.create", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.create())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BarcodeReaderApi.decode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val onArg = args[0] as Boolean
            var wrapped: List<Any?>
            try {
              api.decode(onArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BarcodeReaderApi.light", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val onArg = args[0] as Boolean
            var wrapped: List<Any?>
            try {
              api.light(onArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BarcodeReaderApi.notify", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val notificationArg = args[0] as String
            var wrapped: List<Any?>
            try {
              api.notify(notificationArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BarcodeReaderApi.release", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.release()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BarcodeReaderApi.setProperties", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val propertiesArg = args[0] as Map<String, Any>
            var wrapped: List<Any?>
            try {
              api.setProperties(propertiesArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BarcodeReaderApi.softwareTrigger", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val stateArg = args[0] as Boolean
            var wrapped: List<Any?>
            try {
              api.softwareTrigger(stateArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object BarcodeReaderFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          BarcodeFailureEvent.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          BarcodeReadEvent.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is BarcodeFailureEvent -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is BarcodeReadEvent -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class BarcodeReaderFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by BarcodeReaderFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      BarcodeReaderFlutterApiCodec
    }
  }
  fun onBarcodeEvent(eventArg: BarcodeReadEvent, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BarcodeReaderFlutterApi.onBarcodeEvent", codec)
    channel.send(listOf(eventArg)) {
      callback()
    }
  }
  fun onFailureEvent(eventArg: BarcodeFailureEvent, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BarcodeReaderFlutterApi.onFailureEvent", codec)
    channel.send(listOf(eventArg)) {
      callback()
    }
  }
}
